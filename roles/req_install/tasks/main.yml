#SPDX-License-Identifier: MIT-0
---
# tasks for req_install
- name: Check if packages are already installed
  ansible.builtin.raw:
    rpm -qa |grep "{{ req_install_ansible_required_packages[-1] }}"
  register: pkgexists
  ignore_errors: true

- name: Get user name
  ansible.builtin.raw: whoami
  register: id_user

- name: Check if user is in sudo group
  ansible.builtin.raw: groups {{ id_user.stdout_lines[0] }} | grep sudo
  register: insudogrp
  ignore_errors: true
  tags: sudo_removal

- name: Add user to sudo group if missing (collection install rerun)
  ansible.builtin.raw: sudo usermod -aG sudo {{ ansible_user }}
  when: insudogrp.failed is true
  tags: sudo_removal

- meta: reset_connection
  tags: sudo_removal

- name: Check if python is installed - ** IGNORE THE FAILURE **
  ansible.builtin.raw: which python
  register: pyexists
  ignore_errors: true

- name: Install needed packages using the raw module
   ** Takes a long time! (rpm-ostree install) **
  ansible.builtin.raw: >
    sudo rpm-ostree --idempotent --allow-inactive install
    {{ req_install_rpmfusion_rpm_url + ' '
    + req_install_rpmfusion_rpm_url_nonfree + ' '
    + req_install_ansible_required_packages + ' '
    + req_install_other_packages }}
  register: install_output
  when: pyexists.rc != 0

- name: Set fact for req_removal role if used
  ansible.builtin.set_fact:
    req_install_ansible_required_packages: >
      "{{ req_install_ansible_required_packages + ' '
      + req_install_other_packages }}"
    cacheable: true

- name: Check if user is in sudo group
  ansible.builtin.raw: groups {{ id_user.stdout_lines[0] }} | grep sudo
  register: insudogrp
  ignore_errors: true
  tags: sudo_removal

- name: Remove user from sudo group
  ansible.builtin.raw: "sudo gpasswd -d {{ ansible_user }} sudo"
  when: insudogrp.failed is false
  ignore_errors: true
  register: sudo_user_removed
  tags: sudo_removal

- name: Check for reboot
  ansible.builtin.raw: rpm-ostree db diff
  register: reboot_check

- name: Reboot if necessary
  ansible.builtin.raw: sudo systemd-run --on-active=5 shutdown -r now
  when: reboot_check.stdout.find('pending') != -1
  register: reboot
  tags: [reboot, req_reboot]

- meta: reset_connection
  tags: sudo_removal

- name: Wait for ssh to be available
  ansible.builtin.wait_for_connection:
    delay: 120
  when: reboot.skipped is not true and reboot.failed is false

- name: Add firewalld rich rule to only allow ssh from local network
  ansible.posix.firewalld:
    rich_rule: 'rule family="ipv4" source address="192.168.1.0/24" port protocol="tcp" port="22" accept'
    permanent: true
    state: enabled

- name: Add firewalld rich rule to prevent ssh from any network
  ansible.posix.firewalld:
    service: ssh
    permanent: true
    state: disabled
